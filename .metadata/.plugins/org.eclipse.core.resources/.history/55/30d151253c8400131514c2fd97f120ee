/*
 * Color.h
 *
 *  Created on: Dec 18, 2013
 *      Author: root
 */
#pragma once
#ifndef SLOGGER_H_
#define SLOGGER_H_


#include <fstream>
#include <boost/timer.hpp>
#include <sstream>
#include <boost/signals2/mutex.hpp>
using std::ofstream;



class SLogger
{
private:
	SLogger():isInit(false){};
	static boost::signals2::mutex LoggerMTX;
	static ofstream fd;
	static boost::timer timer;
	static bool isInit;
	static SLogger * logger;
public:
	static SLogger * getInstance();
	void Log(const char * toLog);
	~SLogger(){isInit=false;};
};

SLogger* SLogger::getInstance()
{
	if (!isInit)
	{
		logger=new SLogger();
		isInit=true;
	}
	else
	{
		return logger;
	}
}

	void SLogger::InitLogger()
	{
		SLogger::fd.open("Logger.txt", std::fstream::out | std::fstream::trunc);
		if (!fd.is_open())
		{
			std::cout << "Can't open log file for write.\n";
			exit (EXIT_FAILURE);
		}
		timer.restart();
	}
void SLogger::Log(const char * toLog)
	{
		LoggerMTX.lock();
		fd << timer.elapsed() << " : " << toLog << std::endl;
		LoggerMTX.unlock();
	}

	void DestroyLogger()
	{
		LoggerMTX.lock();
		fd.close();
		LoggerMTX.unlock();
	}

};




/*
#define COLOR_NORMAL "\x1B[0m"
#define COLOR_RED "\x1B[31m"
#define COLOR_GREEN "\x1B[32m"
#define COLOR_YELLOW "\x1B[33m"
#define COLOR_BLUE "\x1B[34m"
#define COLOR_WHITE "\x1B[37m"

static inline void LogColor(const char * text, const char * color = COLOR_NORMAL)
{
	printf("%s%s",color,text);
	printf("%s",COLOR_NORMAL);
}

static inline void LogColorChange(const char * color = COLOR_NORMAL)
{
	printf("%s",color);
}
static inline void LogColorReset()
{
	printf("%s",COLOR_NORMAL);
}*/
#endif /* SLOGGER_H_ */
