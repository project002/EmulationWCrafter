
#ifndef SLOGGER_H_
#define SLOGGER_H_

#include <fstream>
#include <boost/timer.hpp>
#include <boost/signals2/mutex.hpp>
using std::ofstream;

class SLogger
{
private:
	static SLogger * log;
	SLogger(){};
public:
	static SLogger * GetInstance()
	{
		log=0;
	}

};
//class SLogger
//{
//public:
//	static SLogger * GetInstance();
//	void Log(const char * toLog);
//	~SLogger(){isInit=false; delete logger; DestroyLogger();};
//	void InitLogger();
//	void DestroyLogger();
//private:
//	SLogger(){};
//	static boost::signals2::mutex LoggerMTX;
//	static ofstream fd;
//	static boost::timer timer;
//	static bool isInit;
//	static SLogger * logger;
//
//};






/*
#define COLOR_NORMAL "\x1B[0m"
#define COLOR_RED "\x1B[31m"
#define COLOR_GREEN "\x1B[32m"
#define COLOR_YELLOW "\x1B[33m"
#define COLOR_BLUE "\x1B[34m"
#define COLOR_WHITE "\x1B[37m"

static inline void LogColor(const char * text, const char * color = COLOR_NORMAL)
{
	printf("%s%s",color,text);
	printf("%s",COLOR_NORMAL);
}

static inline void LogColorChange(const char * color = COLOR_NORMAL)
{
	printf("%s",color);
}
static inline void LogColorReset()
{
	printf("%s",COLOR_NORMAL);
}*/
#endif /* SLOGGER_H_ */
