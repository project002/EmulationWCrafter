/*
 * CBasicGUI.h
 * offer basic gui for the emulation
 * will be extended in the future with
 * a proper Graphical GUI acts as a singleton
 *  Created on: Jan 26, 2014
 *      Author: root
 */

#ifndef CBASICGUI_H_
#define CBASICGUI_H_
#include <iostream>
#include <map>
#include <vector>
class SBasicGUI
{
public:
	static enum DATATYPE {
		PACKETPROCCES,PACKETDROP,IPPACKET,DHCPPACKET,ARPPACKET
	} dataType;

	static SBasicGUI &getInstance()
	{
		static SBasicGUI ref;
		return ref;
	}

	void init()
	{
		messages.push_back("Basic GUI Started");
		gui_refresh = boost::thread(&SBasicGUI::output,this);
	}

	void refresh()
	{
		refreshMTX.lock();
		dropped_packets = calcLostPacketsPercent();
		refreshMTX.unlock();
	}

	void clear()
	{
		system("clear");
	}

	void output()
	{
		refresh();
		clear();
		int processed = 0;
		int dropped = 0;

		try {processed = dataSet.at(PACKETPROCCES);}
		catch(const std::out_of_range & e) {}

		try {dropped = dataSet.at(PACKETDROP);}
		catch(const std::out_of_range & e) {}

		(*mOut) << "Packets Processed: " << processed << endl;
		(*mOut) << "Packets Dropped: " << dropped << endl;
		(*mOut) << "Lost Percentage: " << dropped_packets << endl;

		//print out messages:
		(*mOut) << "Messages" << endl;

		std::vector<std::string>::iterator it = messages.begin();
		for (;it!=messages.end();++it)
		{
			(*mOut) << "[#]" << (*it) << endl;
		}

	}

	bool insertData(DATATYPE type,int value)
	{
		insertMTX.lock();
		std::pair<std::map<DATATYPE,int>::iterator,bool> ret;
		ret = dataSet.insert(std::pair<DATATYPE,int>(type,value));
		if (ret.second == false)
		{
			dataSet.at(type) = value;
			insertMTX.unlock();
			refresh();
			return true;
		}
		insertMTX.unlock();
		refresh();
		return ret.second;
	}

	void incData(DATATYPE type)
	{
		insertMTX.lock();
		try
		{
			dataSet.at(type) += 1;
			insertMTX.unlock();
		}
		catch (const std::out_of_range & c)
		{
			insertMTX.unlock();
			insertData(type,1); //if not found add it
		}

	}

	void msg(const char* format,...)
	{
		va_list args;
		va_start(args,format);
		char* str;
		vsprintf(str,format,args);
		va_end(args);
		messages.push_back(std::string(str));
	}

	virtual ~SBasicGUI()
	{
		dataSet.clear();
		messages.clear();
		insertMTX.unlock();
		refreshMTX.unlock();
	}
private:
	std::ostream* mOut;
	std::map<SBasicGUI::DATATYPE,int> dataSet;
	std::vector<std::string> messages;
	boost::signals2::mutex insertMTX;
	boost::signals2::mutex refreshMTX;
	boost::thread gui_refresh;
	double dropped_packets;

	SBasicGUI():mOut(&std::cout),dataSet(std::map<SBasicGUI::DATATYPE,int>()),dropped_packets(0) {}
	SBasicGUI(const SBasicGUI &):mOut(&std::cout),dataSet(std::map<SBasicGUI::DATATYPE,int>()),dropped_packets(0) {}
	void operator=(SBasicGUI const &);

	double calcLostPacketsPercent()
	{
		int processed = 0;
		int dropped = 0;

		try {processed = dataSet.at(PACKETPROCCES);}
		catch(const std::out_of_range & e) {}

		try {dropped = dataSet.at(PACKETDROP);}
		catch(const std::out_of_range & e) {}

		int packets = processed+dropped;
		double dropped_percentage = (packets/100.0)*dropped;
		return dropped_percentage;
	}
};

#endif /* CBASICGUI_H_ */
